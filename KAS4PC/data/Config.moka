//--------------------------------------------------------------------------
//    Config.moka
//    Copyright (C) 2012 スタジオ蜜柑
//    This file is licensed under zlib/libpng License.
//--------------------------------------------------------------------------

// このファイルは、KAS の基本動作等を設定できるファイルです。
// Config.java と同じように設定が行えます。

// このファイルが有効な場合、Config.java の設定は無効となります。
// ↓の return; を削除すると、設定が有効になります。
//return false;	// この行を消すと有効になる




//-------------------------------------------------- リソース関連の設定 ----


;var Res = %[];


// ◆ ネットワークリソースのアドレス
// ネットワークリソース（KPCファイル）の URL を指定します。
// ここで指定した URL のファイルは、初回起動時に SD カードへとダウンロードされます。
// ネットワークリソースを利用しない場合は空文字 "" を指定します。
//
// 例：;Res.url = ["http://www.xxxxxxxxx.xxx/data.kpc"];
//
// 複数の URL を指定することもできます。
// その場合はカンマ ( , ) で区切って指定します。
//
// 例：;Res.url = [
//        "http://www.xxxxxxxxx.xxx/data.kpc",
//        "http://www.yyyyyyyyy.yyy/data.kpc",
//        "http://www.zzzzzzzzz.zzz/data.kpc"
//     ];
//
// 複数の URL を指定した場合、どれか一つがランダムに選ばれてダウンロードされます。
// ダウンロード先を分割することでサーバーの負荷を軽減できます。
// 複数指定をする場合は、全ての URL に同じファイルを置くようにしてください。
;Res.url = [""];


// ◆ ネットワークリソースのファイルサイズ
// ネットワークリソースのファイルサイズを、バイト単位で指定します。
// 主にファイルのダウンロードが完了しているかどうかのチェックに使用されます。
;Res.filesize = 0;




//---------------------------------------------------------- 全体の設定 ----


;var Util = %[];


// ◆ バージョン
// ゲームのバージョンを表す文字列。設定画面で表示されます。
// setversionタグでも変更できます。
;Util.gameVersion = "unknown version";


// ◆ タイトル
// ゲームのタイトルです。
// アプリケーション名（KAS Generatorで指定したもの）とは別物です。
// ここで指定したタイトルはセーブ画面と設定画面で表示されます。
// title タグでも指定できます。
;Util.gameTitle = "ゲームタイトル";


// ◆ データディレクトリのパス
// ※データディレクトリのパスは変更できません。


// ◆ 画面のサイズ
// 画面のサイズを指定します。
// ここで指定したサイズで画面を構成します。
// あまり大きな数字を指定すると、メモリ不足になる可能性が高くなります。
// 標準は800×450（16:9）です。
;Util.standardDispWidth = 800;
;Util.standardDispHeight = 450;


// ◆ フルスクリーン表示するかどうか
// 画面をディスプレイサイズに拡大して表示するかどうかを指定します。
// true を指定すると、画面を拡大してフルスクリーンで表示します。
// false を指定すると、元のサイズのままディスプレイの中央に表示します。
// この値は初期値です。ユーザーの設定がシステム変数に記憶されるようになっています。
;Util.fullscreen = true;


// ◆ スリープからの復帰時にレジュームするかどうか
// 端末がスリープから復帰した際、最後に通過したセーブ可能ラベル時点での
// 状態を復元するかどうかを指定します。
;Util.enableAutoResume = false;


// ◆ セーブデータを暗号化するかどうか
// セーブデータや既読・未読データ等を暗号化するかどうかを指定します。
// 暗号化することでプレイヤーがセーブデータの中身を閲覧できなくなります。
// ※この設定を変えた時には、それまでのセーブデータを削除してください。
;Util.encrypt = false;


// ◆ セーブデータを圧縮するかどうか
// セーブデータや既読・未読データ等を圧縮保存するかどうかを指定します。
// 圧縮することでプレイヤーがセーブデータの中身を閲覧できなくなり、
// SD カードの容量をほんの少しですが節約できます。
// ※この設定を変えた時には、それまでのセーブデータを削除してください。
;Util.compress = false;


// ◆ セーブデータのプレフィックス
// セーブデータのファイル名の先頭につける文字列です。
// アルファベットのみの文字列を指定してください。
// ※使用できない文字列："davasf","datatrail",
;Util.saveDataPrefix = "savedata_";


// ◆ サムネイルを保存するか
// true を指定するとセーブの際、セーブデータとは別に
// サムネイル画像が保存されます。
;Util.saveThumbnail = true;


// ◆ サムネイルのプレフィックス
// サムネイルのファイル名の先頭につける文字列です。
// アルファベットのみの文字列を指定してください。
// ※使用できない文字列："davasf","datatrail",
;Util.thumbnailPrefix = "thumbnail_";


// ◆ サムネイルの保存サイズ
// サムネイルの横幅を指定します。saveThumbnail を true に設定しないとこの
// 設定は意味がありません。
// 横幅はピクセル単位で指定してください。
// 縦幅は画面サイズの比から自動的に算出されます。
;Util.thumbnailWidth = 133;


// ◆ セーブデータにマクロを保存するかどうか
// セーブデータにマクロの情報を記憶させるかどうかを指定します。
// true を指定すると、マクロの情報がセーブデータに保存され、ロード時には
// マクロが復元されます。
// false を指定すると、マクロの情報は保存されず、ロードしてもマクロは
// 復元されません。
// たとえばシナリオの先頭で全マクロの定義をするような場合には、古いマクロの
// 情報がセーブデータに残ってしまい、ロード時に新しいマクロを上書きしてしまう
// ため、false を指定するほうが良いでしょう。
;Util.saveMacros = false;


// ◆ 利用可能なセーブデータの数
// 標準のセーブ＆ロード画面で、ユーザーが選択可能なセーブデータの数です。
// save や load タグで保存可能なセーブデータの数には影響しません。
// 標準のセーブ＆ロード画面によるセーブデータの管理を行わない場合
// (ゲーム画面中でセーブデータ管理を行う場合など)は、この値は必要な数に設定し、
// オプションメニューの変更でセーブとロードを非表示にして下さい。
;Util.saveNumMax = 40;


// ◆ 終了時に尋ねるかどうか
// メニューの「終了」および端末の戻るボタンが押されたとき、
// ダイアログを表示するかどうか指定します。
// true を指定すると、ダイアログが表示されます。
// false を指定すると、ダイアログを表示せず、すぐに終了します。
;Util.ask_exit = true;


// ◆ 存在しないタグをエラーにするかどうか
// 存在しないタグに対して、エラーダイアログを表示するかどうかを設定します。
// true を指定するとエラーダイアログを表示して終了します。
// false を指定するとそのタグは無視されます。
;Util.notExistTag = false;




//---------------------------------------------------- 画面や動作の設定 ----


;var Main = %[];
;Main.scPositionX = %[];


// ◆ SEバッファの数
// 利用可能な効果音バッファの数を指定します。
// ここで指定した数の分だけ、効果音を同時に再生できます。
;Main.seBufferNum = 3;


// ◆ 初期状態の前景レイヤの数
// ゲーム起動時の前景レイヤの数を指定します。
// 数が多いと速度が低下したりメモリを消費したりするので、
// 必要最低限の数を指定するようにしてください。
// 必要なければ 0 を指定してかまいません。
// laycount タグでも変更できます。
;Main.numCharacterLayers = 3;


// ◆ 前景レイヤの左右中心位置
// +-----------+
// |           |
// | |   |   | |
// | | | | | | |
// +-----------+
// image タグの pos 属性で指定する画像位置、および名前を指定します。
// ;Main.scPositionX.位置名 = 中心位置; の形で指定してください。
;Main.scPositionX.left = 200;
;Main.scPositionX.left_center = 300;
;Main.scPositionX.center = 400;
;Main.scPositionX.right_center = 500;
;Main.scPositionX.right = 600;

;Main.scPositionX.l = Main.scPositionX.left;
;Main.scPositionX.lc = Main.scPositionX.left_center;
;Main.scPositionX.c = Main.scPositionX.center;
;Main.scPositionX.rc = Main.scPositionX.right_center;
;Main.scPositionX.r = Main.scPositionX.right;


// ◆ 初期状態のメッセージレイヤの数
// ゲーム起動時のメッセージレイヤの数を指定します。
// 数が多いと速度が低下したりメモリを消費したりするので、
// 必要最低限の数を指定するようにしてください。
// laycount タグでも変更できます。
;Main.numMessageLayers = 3;


// ◆ 初期状態でメッセージレイヤを表示するかどうか
// true を指定するとメッセージレイヤ0が初期状態で表示状態になりますが、
// false を指定すると初期状態ではすべてのメッセージレイヤは初期状態で非表示
// になります。
;Main.initialMessageLayerVisible = true;




//---------------------------------------------- メッセージレイヤの設定 ----


;var Mes = %[];


// ◆ メッセージレイヤの色
// 0xRRGGBB 形式でメッセージレイヤの色を指定します。
// position タグの color 属性に相当
;Mes.frameColor = 0x000000;


// ◆ メッセージレイヤの透明度
// フレーム画像を指定しなかった時の、メッセージレイヤの矩形枠の透明度を
// 0 ～ 255 の数値で指定します。
// position タグの opacity 属性に相当
;Mes.frameOpacity = 127;


// ◆ 左右上下マージン
// マージン (余白) を pixel 単位で指定します。
// position タグの marginl, maringt, marginr, marginb 属性に対応します。
;Mes.marginL = 10; // 左余白
;Mes.marginT = 10; // 上余白
;Mes.marginR = 10; // 右余白
;Mes.marginB = 10; // 下余白


// ◆ 位置とサイズ
// 初期位置とサイズを指定します。
// position タグのそれぞれ left top width height の属性に対応します。
;Mes.left = 20;			// 左端位置
;Mes.top = 20;			// 上端位置
;Mes.width = 800-40;	// 幅
;Mes.height = 450-40;	// 高さ


// ◆ 自動改行
// メッセージレイヤの右端に到達したとき、
// 自動的に改行するかどうかを指定します。
// defstyle タグの autoreturn 属性に相当
;Mes.defaultAutoReturn = true; 


// ◆ 右文字マージン
// 禁則処理用にあけておく右端の文字数を指定します。
;Mes.marginRCh = 2;


// ◆ 文字サイズ
// デフォルトの文字サイズを指定します。
// deffont タグの size 属性に相当
;Mes.defaultFontSize = 22; 


// ◆ 行間
// 行間の大きさを指定します。
// defstyle タグの linespacing に相当
;Mes.defaultLineSpacing = 18;


// ◆ 字間
// 字間の大きさを指定します。
// defstyle タグの pitch 属性に相当
;Mes.defaultPitch = 0;


// ◆ 文字の色
// デフォルトの文字の色を 0xRRGGBB で指定します。
// deffont タグの color 属性に相当
;Mes.defaultColor = 0xffffff;  


// ◆ 太字
// 文字を太字にするかどうかを指定します。
// フォントによっては適用されないこともあります。
// deffont タグの bold 属性に相当
;Mes.defaultBold = false;


// ◆ 斜体
// 文字を斜体にするかどうかを指定します。
// フォントによっては適用されないこともあります。
// deffont タグの bold 属性に相当
;Mes.defaultItalic = false; 


// ◆ 影の色
// 影の色を 0xRRGGBB で指定します。
// deffont タグの shadowcolor に属性に相当
;Mes.defaultShadowColor = 0x000000;


// ◆ 縁取りの色
// 縁取りの色を 0xRRGGBB で指定します。
// deffont タグの edgecolor に属性に相当
;Mes.defaultEdgeColor = 0x000000;


// ◆ 影
// 文字の影を描画するかどうかを指定します。
// deffont タグの shadow 属性に相当
;Mes.defaultShadow = true;


// ◆ 縁取り
// 文字の縁取りを描画するかどうかを指定します。
// deffont タグの edge 属性に相当
;Mes.defaultEdge = false;


// ◆ 行末グリフ画像
// 行末クリック待ちで表示する画像を指定します。
// 同じ名前のアニメーション定義ファイルがある場合はアニメーションします。
;Mes.lineBreakGlyph = "linebreak";


// ◆ ページ末グリフ画像
// ページ末クリック待ちで表示する画像を指定します。
// 同じ名前のアニメーション定義ファイルがある場合はアニメーションします。
;Mes.pageBreakGlyph = "pagebreak";


// ◆ クリック待ちグリフを固定した場所に表示するかどうか
// false を指定すると、現在の文字表示位置に表示されます。
// true を指定すると、glyphFixedLeft および glyphFixedTop で指定した位置に表示されます。
;Mes.glyphFixedPosition = false;  // glyph タグの fix 属性に相当


// ◆ クリック待ちグリフを固定した場所に表示するときの位置
// glyphFixedLeft にはグリフを表示する左端位置を、
// glyphFixedTop にはグリフを表示する上端位置を指定してください。
;Mes.glyphFixedLeft = 0;  // glyph タグの left 属性に相当
;Mes.glyphFixedTop = 0;  // glyph タグの top 属性に相当


// ◆ リンクの強調色
// リンクを選択したときに出る半透明矩形のデフォルトの色です。
// link タグの color 属性に相当
;Mes.defaultLinkColor = 0x00469d;  


// ◆ リンクの不透明度
// リンクを選択したときに出る半透明矩形の不透明度です。
;Mes.defaultLinkOpacity = 127;




//-------------------------------------------- オプションメニューの設定 ----


;var Menu = %[];
;Menu.data = %[];


// ◆ オプションメニューの表示・非表示
// 端末のメニューボタンを押したときのメニューを表示するかどうかを指定します。
// trueで表示、falseで非表示になります。
// falseの場合、メニューボタンを押しても何も表示されなくなります。
;Menu.menuVisible = true;


// ◆ 標準オプションメニューを利用するか
// システム標準のオプションメニューを利用するかどうかを指定します。
// false を指定すると、rclick タグで動作を指定できるようになります。
;Menu.builtInOptionMenu = true;


// ◆ 各オプションメニューの設定
// オプションメニューの各項目の表示・非表示、および表示されるテキストを指定します。
// [テキスト, 表示]; で指定してください。

// セーブ
;Menu.save = ["セーブ", true];

// ロード
;Menu.load = ["ロード", true];

// メッセージ履歴
;Menu.history = ["バックログ", true];

// メッセージを隠す
;Menu.hide = ["メッセージを隠す", true];

// スキップ開始
;Menu.skip = ["スキップ開始", true];

// 環境設定
;Menu.config = ["設定", true];

// オートモード開始
;Menu.auto = ["オートモード開始", true];

// タイトルへ戻る（最初へ戻る）
;Menu.title = ["タイトルへ戻る", true];

// ゲームデータ削除
;Menu.deldata = ["ゲームデータ削除", true];

// ゲーム終了
;Menu.exit = ["終了", true];




//------------------------------------------------ メッセージ履歴の設定 ----


;var History = %[];


// ◆ フォント
// メッセージ履歴のフォントを指定します。
// "default" を指定するとデフォルトフォントになります
;History.fontFace = "default";


// ◆ フォントサイズ
// メッセージ履歴のフォントサイズを指定します。
;History.fontSize = 24;


// ◆ 履歴の最大行数
// 履歴に記憶する行数を指定します。
;History.messageLineMax = 1000;


// ◆ 行の高さ
// 一行の高さを指定します。
;History.linespacing = 35;


// ◆ 表示位置
// メッセージの表示開始位置を指定します。
;History.left = 10;	// 左位置
;History.top = 20;	// 上位置


// ◆ 表示サイズ
// メッセージの表示されるサイズを指定します。
;History.width = 720;		// 幅
;History.height = 420;	// 高さ


// ◆ 閉じるボタンの設定
// 閉じるボタンの設定をします。
;History.closeFilename = "history_close.png";	// 画像
;History.closeWidth = 50;	// ボタンの幅
;History.closeHeight = 50;	// ボタンの高さ
;History.closeLeft = 730;	// 左位置
;History.closeTop = 10;		// 上位置

// ◆ 前ページボタンの設定
// 前ページボタンの設定をします。
;History.prevFilename = "history_prev.png";	// 画像
;History.prevPageWidth = 50;	// ボタンの幅
;History.prevPageHeight = 50;	// ボタンの高さ
;History.prevPageLeft = 730;	// 左位置
;History.prevPageTop = 60;		// 上位置

// ◆ 次ページボタンの設定
// 次ページボタンの設定をします。
;History.nextFilename = "history_next.png";	// 画像
;History.nextPageWidth = 50;	// ボタンの幅
;History.nextPageHeight = 50;	// ボタンの高さ
;History.nextPageLeft = 730;	// 左位置
;History.nextPageTop = 390;		// 上位置


return true;	// この一文を削除しないでください
